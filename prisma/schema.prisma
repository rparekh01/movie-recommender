// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// generator client {
//  provider = "prisma-client-js"
//  output   = "../app/generated/prisma"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String?
  password        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  genrePreferences UserGenre[]
  ratings         Rating[]
  watchlist       Watchlist[]
}

model Movie {
  id          String       @id @default(uuid())
  title       String
  posterPath  String?
  releaseYear Int
  overview    String?
  director    String?
  runtime     Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  genres      MovieGenre[]
  ratings     Rating[]
  watchlist   Watchlist[]
}

model Genre {
  id          String       @id @default(uuid())
  name        String       @unique
  movies      MovieGenre[]
  users       UserGenre[]
}

model MovieGenre {
  id       String @id @default(uuid())
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId  String
  genre    Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId  String

  @@unique([movieId, genreId])
}

model UserGenre {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId String

  @@unique([userId, genreId])
}

model Rating {
  id        String   @id @default(uuid())
  value     Int      // 1-5 star rating
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String

  @@unique([userId, movieId])
}

model Watchlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String

  @@unique([userId, movieId])
}
